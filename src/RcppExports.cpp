// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GrossoLocatelliPullanMcRunner
Rcpp::List GrossoLocatelliPullanMcRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_GrossoLocatelliPullanMcRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(GrossoLocatelliPullanMcRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// getBipartitePartitionsRunner
Rcpp::List getBipartitePartitionsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_getBipartitePartitionsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(getBipartitePartitionsRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// getAndCheckTopologicalSortRunner
Rcpp::List getAndCheckTopologicalSortRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_getAndCheckTopologicalSortRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(getAndCheckTopologicalSortRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// getTopologicalSortRunner
std::vector<int> getTopologicalSortRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_getTopologicalSortRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(getTopologicalSortRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsConnectedRunner
int IsConnectedRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsConnectedRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsConnectedRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsAcyclicRunner
int IsAcyclicRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsAcyclicRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsAcyclicRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsTreeRunner
int IsTreeRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsTreeRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsTreeRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsBipartiteRunner
int IsBipartiteRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsBipartiteRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsBipartiteRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsStronglyConnectedRunner
int IsStronglyConnectedRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsStronglyConnectedRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsStronglyConnectedRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsDAGRunner
int IsDAGRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsDAGRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsDAGRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsBiNodeConnectedRunner
int IsBiNodeConnectedRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsBiNodeConnectedRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsBiNodeConnectedRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsBiEdgeConnectedRunner
int IsBiEdgeConnectedRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsBiEdgeConnectedRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsBiEdgeConnectedRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsLoopFreeRunner
int IsLoopFreeRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsLoopFreeRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsLoopFreeRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsParallelFreeRunner
int IsParallelFreeRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsParallelFreeRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsParallelFreeRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsSimpleGraphRunner
int IsSimpleGraphRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsSimpleGraphRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsSimpleGraphRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// IsEulerianRunner
int IsEulerianRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_IsEulerianRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsEulerianRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// CountBiEdgeConnectedComponentsRunner
int CountBiEdgeConnectedComponentsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_CountBiEdgeConnectedComponentsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(CountBiEdgeConnectedComponentsRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// CountConnectedComponentsRunner
int CountConnectedComponentsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_CountConnectedComponentsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(CountConnectedComponentsRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// CountBiNodeConnectedComponentsRunner
int CountBiNodeConnectedComponentsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_CountBiNodeConnectedComponentsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(CountBiNodeConnectedComponentsRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// CountStronglyConnectedComponentsRunner
int CountStronglyConnectedComponentsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_CountStronglyConnectedComponentsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(CountStronglyConnectedComponentsRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// FindStronglyConnectedComponentsRunner
std::vector<int> FindStronglyConnectedComponentsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_FindStronglyConnectedComponentsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(FindStronglyConnectedComponentsRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// FindStronglyConnectedCutArcsRunner
Rcpp::List FindStronglyConnectedCutArcsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_FindStronglyConnectedCutArcsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(FindStronglyConnectedCutArcsRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// FindBiEdgeConnectedCutEdgesRunner
Rcpp::List FindBiEdgeConnectedCutEdgesRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_FindBiEdgeConnectedCutEdgesRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(FindBiEdgeConnectedCutEdgesRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// FindBiNodeConnectedComponentsRunner
std::vector<int> FindBiNodeConnectedComponentsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_FindBiNodeConnectedComponentsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(FindBiNodeConnectedComponentsRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// FindBiNodeConnectedCutNodesRunner
std::vector<int> FindBiNodeConnectedCutNodesRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_FindBiNodeConnectedCutNodesRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(FindBiNodeConnectedCutNodesRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// FindConnectedComponentsRunner
std::vector<int> FindConnectedComponentsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_FindConnectedComponentsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(FindConnectedComponentsRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// FindBiEdgeConnectedComponentsRunner
std::vector<int> FindBiEdgeConnectedComponentsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_FindBiEdgeConnectedComponentsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(FindBiEdgeConnectedComponentsRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// GraphCompatabilityConverter
Rcpp::List GraphCompatabilityConverter(std::vector<int> nodesList, std::vector<int> arcSources, std::vector<int> arcTargets);
RcppExport SEXP _rlemon_GraphCompatabilityConverter(SEXP nodesListSEXP, SEXP arcSourcesSEXP, SEXP arcTargetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type nodesList(nodesListSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    rcpp_result_gen = Rcpp::wrap(GraphCompatabilityConverter(nodesList, arcSources, arcTargets));
    return rcpp_result_gen;
END_RCPP
}
// BfsRunner
Rcpp::List BfsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes, int startNode, int endNode);
RcppExport SEXP _rlemon_BfsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP, SEXP startNodeSEXP, SEXP endNodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type startNode(startNodeSEXP);
    Rcpp::traits::input_parameter< int >::type endNode(endNodeSEXP);
    rcpp_result_gen = Rcpp::wrap(BfsRunner(arcSources, arcTargets, numNodes, startNode, endNode));
    return rcpp_result_gen;
END_RCPP
}
// DfsRunner
Rcpp::List DfsRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes, int startNode, int endNode);
RcppExport SEXP _rlemon_DfsRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP, SEXP startNodeSEXP, SEXP endNodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type startNode(startNodeSEXP);
    Rcpp::traits::input_parameter< int >::type endNode(endNodeSEXP);
    rcpp_result_gen = Rcpp::wrap(DfsRunner(arcSources, arcTargets, numNodes, startNode, endNode));
    return rcpp_result_gen;
END_RCPP
}
// MaxCardinalitySearchRunner
Rcpp::List MaxCardinalitySearchRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcCapacities, int numNodes, int startNode);
RcppExport SEXP _rlemon_MaxCardinalitySearchRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcCapacitiesSEXP, SEXP numNodesSEXP, SEXP startNodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcCapacities(arcCapacitiesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type startNode(startNodeSEXP);
    rcpp_result_gen = Rcpp::wrap(MaxCardinalitySearchRunner(arcSources, arcTargets, arcCapacities, numNodes, startNode));
    return rcpp_result_gen;
END_RCPP
}
// CirculationRunner
Rcpp::List CirculationRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcLowerBound, std::vector<int> arcUpperBound, std::vector<int> nodeSupplies, int numNodes);
RcppExport SEXP _rlemon_CirculationRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcLowerBoundSEXP, SEXP arcUpperBoundSEXP, SEXP nodeSuppliesSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcLowerBound(arcLowerBoundSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcUpperBound(arcUpperBoundSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type nodeSupplies(nodeSuppliesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(CirculationRunner(arcSources, arcTargets, arcLowerBound, arcUpperBound, nodeSupplies, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// PreflowRunner
Rcpp::List PreflowRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int sourceNode, int destinationNode, int numNodes);
RcppExport SEXP _rlemon_PreflowRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP sourceNodeSEXP, SEXP destinationNodeSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type sourceNode(sourceNodeSEXP);
    Rcpp::traits::input_parameter< int >::type destinationNode(destinationNodeSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(PreflowRunner(arcSources, arcTargets, arcDistances, sourceNode, destinationNode, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// EdmondsKarpRunner
Rcpp::List EdmondsKarpRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int sourceNode, int destinationNode, int numNodes);
RcppExport SEXP _rlemon_EdmondsKarpRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP sourceNodeSEXP, SEXP destinationNodeSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type sourceNode(sourceNodeSEXP);
    Rcpp::traits::input_parameter< int >::type destinationNode(destinationNodeSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(EdmondsKarpRunner(arcSources, arcTargets, arcDistances, sourceNode, destinationNode, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// MaximumWeightPerfectMatchingRunner
Rcpp::List MaximumWeightPerfectMatchingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcWeights, int numNodes);
RcppExport SEXP _rlemon_MaximumWeightPerfectMatchingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcWeightsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcWeights(arcWeightsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(MaximumWeightPerfectMatchingRunner(arcSources, arcTargets, arcWeights, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// MaximumWeightFractionalPerfectMatchingRunner
Rcpp::List MaximumWeightFractionalPerfectMatchingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcWeights, int numNodes);
RcppExport SEXP _rlemon_MaximumWeightFractionalPerfectMatchingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcWeightsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcWeights(arcWeightsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(MaximumWeightFractionalPerfectMatchingRunner(arcSources, arcTargets, arcWeights, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// MaximumWeightFractionalMatchingRunner
Rcpp::List MaximumWeightFractionalMatchingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcWeights, int numNodes);
RcppExport SEXP _rlemon_MaximumWeightFractionalMatchingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcWeightsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcWeights(arcWeightsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(MaximumWeightFractionalMatchingRunner(arcSources, arcTargets, arcWeights, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// MaximumWeightMatchingRunner
Rcpp::List MaximumWeightMatchingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcWeights, int numNodes);
RcppExport SEXP _rlemon_MaximumWeightMatchingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcWeightsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcWeights(arcWeightsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(MaximumWeightMatchingRunner(arcSources, arcTargets, arcWeights, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// MaximumCardinalityMatchingRunner
Rcpp::List MaximumCardinalityMatchingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_MaximumCardinalityMatchingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(MaximumCardinalityMatchingRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// MaximumCardinalityFractionalMatchingRunner
Rcpp::List MaximumCardinalityFractionalMatchingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_MaximumCardinalityFractionalMatchingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(MaximumCardinalityFractionalMatchingRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// CycleCancellingRunner
Rcpp::List CycleCancellingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcCapacities, std::vector<int> arcCosts, std::vector<int> nodeSupplies, int numNodes);
RcppExport SEXP _rlemon_CycleCancellingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcCapacitiesSEXP, SEXP arcCostsSEXP, SEXP nodeSuppliesSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcCapacities(arcCapacitiesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcCosts(arcCostsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type nodeSupplies(nodeSuppliesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(CycleCancellingRunner(arcSources, arcTargets, arcCapacities, arcCosts, nodeSupplies, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// CapacityScalingRunner
Rcpp::List CapacityScalingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcCapacities, std::vector<int> arcCosts, std::vector<int> nodeSupplies, int numNodes);
RcppExport SEXP _rlemon_CapacityScalingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcCapacitiesSEXP, SEXP arcCostsSEXP, SEXP nodeSuppliesSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcCapacities(arcCapacitiesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcCosts(arcCostsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type nodeSupplies(nodeSuppliesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(CapacityScalingRunner(arcSources, arcTargets, arcCapacities, arcCosts, nodeSupplies, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// CostScalingRunner
Rcpp::List CostScalingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcCapacities, std::vector<int> arcCosts, std::vector<int> nodeSupplies, int numNodes);
RcppExport SEXP _rlemon_CostScalingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcCapacitiesSEXP, SEXP arcCostsSEXP, SEXP nodeSuppliesSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcCapacities(arcCapacitiesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcCosts(arcCostsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type nodeSupplies(nodeSuppliesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(CostScalingRunner(arcSources, arcTargets, arcCapacities, arcCosts, nodeSupplies, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// NetworkSimplexRunner
Rcpp::List NetworkSimplexRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcCapacities, std::vector<int> arcCosts, std::vector<int> nodeSupplies, int numNodes);
RcppExport SEXP _rlemon_NetworkSimplexRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcCapacitiesSEXP, SEXP arcCostsSEXP, SEXP nodeSuppliesSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcCapacities(arcCapacitiesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcCosts(arcCostsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type nodeSupplies(nodeSuppliesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(NetworkSimplexRunner(arcSources, arcTargets, arcCapacities, arcCosts, nodeSupplies, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// NagamochiIbarakiRunner
Rcpp::List NagamochiIbarakiRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcWeights, int numNodes);
RcppExport SEXP _rlemon_NagamochiIbarakiRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcWeightsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcWeights(arcWeightsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(NagamochiIbarakiRunner(arcSources, arcTargets, arcWeights, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// HaoOrlinRunner
Rcpp::List HaoOrlinRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcWeights, int numNodes);
RcppExport SEXP _rlemon_HaoOrlinRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcWeightsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcWeights(arcWeightsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(HaoOrlinRunner(arcSources, arcTargets, arcWeights, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// GomoryHuTreeRunner
Rcpp::List GomoryHuTreeRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcWeights, int numNodes);
RcppExport SEXP _rlemon_GomoryHuTreeRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcWeightsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcWeights(arcWeightsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(GomoryHuTreeRunner(arcSources, arcTargets, arcWeights, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// HowardMmcRunner
Rcpp::List HowardMmcRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes);
RcppExport SEXP _rlemon_HowardMmcRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(HowardMmcRunner(arcSources, arcTargets, arcDistances, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// KarpMmcRunner
Rcpp::List KarpMmcRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes);
RcppExport SEXP _rlemon_KarpMmcRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(KarpMmcRunner(arcSources, arcTargets, arcDistances, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// HartmannOrlinMmcRunner
Rcpp::List HartmannOrlinMmcRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes);
RcppExport SEXP _rlemon_HartmannOrlinMmcRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(HartmannOrlinMmcRunner(arcSources, arcTargets, arcDistances, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// KruskalRunner
Rcpp::List KruskalRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes);
RcppExport SEXP _rlemon_KruskalRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(KruskalRunner(arcSources, arcTargets, arcDistances, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// MinCostArborescenceRunner
Rcpp::List MinCostArborescenceRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int sourceNode, int numNodes);
RcppExport SEXP _rlemon_MinCostArborescenceRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP sourceNodeSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type sourceNode(sourceNodeSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(MinCostArborescenceRunner(arcSources, arcTargets, arcDistances, sourceNode, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// PlanarCheckingRunner
bool PlanarCheckingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_PlanarCheckingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(PlanarCheckingRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// PlanarEmbeddingRunner
Rcpp::List PlanarEmbeddingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_PlanarEmbeddingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(PlanarEmbeddingRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// PlanarColoringRunner
Rcpp::List PlanarColoringRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes, bool useFiveAlg);
RcppExport SEXP _rlemon_PlanarColoringRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP, SEXP useFiveAlgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< bool >::type useFiveAlg(useFiveAlgSEXP);
    rcpp_result_gen = Rcpp::wrap(PlanarColoringRunner(arcSources, arcTargets, numNodes, useFiveAlg));
    return rcpp_result_gen;
END_RCPP
}
// PlanarDrawingRunner
Rcpp::List PlanarDrawingRunner(std::vector<int> arcSources, std::vector<int> arcTargets, int numNodes);
RcppExport SEXP _rlemon_PlanarDrawingRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP numNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(PlanarDrawingRunner(arcSources, arcTargets, numNodes));
    return rcpp_result_gen;
END_RCPP
}
// SuurballeRunner
Rcpp::List SuurballeRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes, int startNode, int endNode);
RcppExport SEXP _rlemon_SuurballeRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP, SEXP startNodeSEXP, SEXP endNodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type startNode(startNodeSEXP);
    Rcpp::traits::input_parameter< int >::type endNode(endNodeSEXP);
    rcpp_result_gen = Rcpp::wrap(SuurballeRunner(arcSources, arcTargets, arcDistances, numNodes, startNode, endNode));
    return rcpp_result_gen;
END_RCPP
}
// DijkstraRunner
Rcpp::List DijkstraRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes, int startNode);
RcppExport SEXP _rlemon_DijkstraRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP, SEXP startNodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type startNode(startNodeSEXP);
    rcpp_result_gen = Rcpp::wrap(DijkstraRunner(arcSources, arcTargets, arcDistances, numNodes, startNode));
    return rcpp_result_gen;
END_RCPP
}
// BellmanFordRunner
Rcpp::List BellmanFordRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes, int startNode);
RcppExport SEXP _rlemon_BellmanFordRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP, SEXP startNodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type startNode(startNodeSEXP);
    rcpp_result_gen = Rcpp::wrap(BellmanFordRunner(arcSources, arcTargets, arcDistances, numNodes, startNode));
    return rcpp_result_gen;
END_RCPP
}
// ChristofidesRunner
Rcpp::List ChristofidesRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes, int defaultEdgeWeight);
RcppExport SEXP _rlemon_ChristofidesRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP, SEXP defaultEdgeWeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type defaultEdgeWeight(defaultEdgeWeightSEXP);
    rcpp_result_gen = Rcpp::wrap(ChristofidesRunner(arcSources, arcTargets, arcDistances, numNodes, defaultEdgeWeight));
    return rcpp_result_gen;
END_RCPP
}
// GreedyTSPRunner
Rcpp::List GreedyTSPRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes, int defaultEdgeWeight);
RcppExport SEXP _rlemon_GreedyTSPRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP, SEXP defaultEdgeWeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type defaultEdgeWeight(defaultEdgeWeightSEXP);
    rcpp_result_gen = Rcpp::wrap(GreedyTSPRunner(arcSources, arcTargets, arcDistances, numNodes, defaultEdgeWeight));
    return rcpp_result_gen;
END_RCPP
}
// InsertionTSPRunner
Rcpp::List InsertionTSPRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes, int defaultEdgeWeight);
RcppExport SEXP _rlemon_InsertionTSPRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP, SEXP defaultEdgeWeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type defaultEdgeWeight(defaultEdgeWeightSEXP);
    rcpp_result_gen = Rcpp::wrap(InsertionTSPRunner(arcSources, arcTargets, arcDistances, numNodes, defaultEdgeWeight));
    return rcpp_result_gen;
END_RCPP
}
// NearestNeighborTSPRunner
Rcpp::List NearestNeighborTSPRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes, int defaultEdgeWeight);
RcppExport SEXP _rlemon_NearestNeighborTSPRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP, SEXP defaultEdgeWeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type defaultEdgeWeight(defaultEdgeWeightSEXP);
    rcpp_result_gen = Rcpp::wrap(NearestNeighborTSPRunner(arcSources, arcTargets, arcDistances, numNodes, defaultEdgeWeight));
    return rcpp_result_gen;
END_RCPP
}
// Opt2TSPRunner
Rcpp::List Opt2TSPRunner(std::vector<int> arcSources, std::vector<int> arcTargets, std::vector<int> arcDistances, int numNodes, int defaultEdgeWeight);
RcppExport SEXP _rlemon_Opt2TSPRunner(SEXP arcSourcesSEXP, SEXP arcTargetsSEXP, SEXP arcDistancesSEXP, SEXP numNodesSEXP, SEXP defaultEdgeWeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arcSources(arcSourcesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcTargets(arcTargetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arcDistances(arcDistancesSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type defaultEdgeWeight(defaultEdgeWeightSEXP);
    rcpp_result_gen = Rcpp::wrap(Opt2TSPRunner(arcSources, arcTargets, arcDistances, numNodes, defaultEdgeWeight));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rlemon_GrossoLocatelliPullanMcRunner", (DL_FUNC) &_rlemon_GrossoLocatelliPullanMcRunner, 3},
    {"_rlemon_getBipartitePartitionsRunner", (DL_FUNC) &_rlemon_getBipartitePartitionsRunner, 3},
    {"_rlemon_getAndCheckTopologicalSortRunner", (DL_FUNC) &_rlemon_getAndCheckTopologicalSortRunner, 3},
    {"_rlemon_getTopologicalSortRunner", (DL_FUNC) &_rlemon_getTopologicalSortRunner, 3},
    {"_rlemon_IsConnectedRunner", (DL_FUNC) &_rlemon_IsConnectedRunner, 3},
    {"_rlemon_IsAcyclicRunner", (DL_FUNC) &_rlemon_IsAcyclicRunner, 3},
    {"_rlemon_IsTreeRunner", (DL_FUNC) &_rlemon_IsTreeRunner, 3},
    {"_rlemon_IsBipartiteRunner", (DL_FUNC) &_rlemon_IsBipartiteRunner, 3},
    {"_rlemon_IsStronglyConnectedRunner", (DL_FUNC) &_rlemon_IsStronglyConnectedRunner, 3},
    {"_rlemon_IsDAGRunner", (DL_FUNC) &_rlemon_IsDAGRunner, 3},
    {"_rlemon_IsBiNodeConnectedRunner", (DL_FUNC) &_rlemon_IsBiNodeConnectedRunner, 3},
    {"_rlemon_IsBiEdgeConnectedRunner", (DL_FUNC) &_rlemon_IsBiEdgeConnectedRunner, 3},
    {"_rlemon_IsLoopFreeRunner", (DL_FUNC) &_rlemon_IsLoopFreeRunner, 3},
    {"_rlemon_IsParallelFreeRunner", (DL_FUNC) &_rlemon_IsParallelFreeRunner, 3},
    {"_rlemon_IsSimpleGraphRunner", (DL_FUNC) &_rlemon_IsSimpleGraphRunner, 3},
    {"_rlemon_IsEulerianRunner", (DL_FUNC) &_rlemon_IsEulerianRunner, 3},
    {"_rlemon_CountBiEdgeConnectedComponentsRunner", (DL_FUNC) &_rlemon_CountBiEdgeConnectedComponentsRunner, 3},
    {"_rlemon_CountConnectedComponentsRunner", (DL_FUNC) &_rlemon_CountConnectedComponentsRunner, 3},
    {"_rlemon_CountBiNodeConnectedComponentsRunner", (DL_FUNC) &_rlemon_CountBiNodeConnectedComponentsRunner, 3},
    {"_rlemon_CountStronglyConnectedComponentsRunner", (DL_FUNC) &_rlemon_CountStronglyConnectedComponentsRunner, 3},
    {"_rlemon_FindStronglyConnectedComponentsRunner", (DL_FUNC) &_rlemon_FindStronglyConnectedComponentsRunner, 3},
    {"_rlemon_FindStronglyConnectedCutArcsRunner", (DL_FUNC) &_rlemon_FindStronglyConnectedCutArcsRunner, 3},
    {"_rlemon_FindBiEdgeConnectedCutEdgesRunner", (DL_FUNC) &_rlemon_FindBiEdgeConnectedCutEdgesRunner, 3},
    {"_rlemon_FindBiNodeConnectedComponentsRunner", (DL_FUNC) &_rlemon_FindBiNodeConnectedComponentsRunner, 3},
    {"_rlemon_FindBiNodeConnectedCutNodesRunner", (DL_FUNC) &_rlemon_FindBiNodeConnectedCutNodesRunner, 3},
    {"_rlemon_FindConnectedComponentsRunner", (DL_FUNC) &_rlemon_FindConnectedComponentsRunner, 3},
    {"_rlemon_FindBiEdgeConnectedComponentsRunner", (DL_FUNC) &_rlemon_FindBiEdgeConnectedComponentsRunner, 3},
    {"_rlemon_GraphCompatabilityConverter", (DL_FUNC) &_rlemon_GraphCompatabilityConverter, 3},
    {"_rlemon_BfsRunner", (DL_FUNC) &_rlemon_BfsRunner, 5},
    {"_rlemon_DfsRunner", (DL_FUNC) &_rlemon_DfsRunner, 5},
    {"_rlemon_MaxCardinalitySearchRunner", (DL_FUNC) &_rlemon_MaxCardinalitySearchRunner, 5},
    {"_rlemon_CirculationRunner", (DL_FUNC) &_rlemon_CirculationRunner, 6},
    {"_rlemon_PreflowRunner", (DL_FUNC) &_rlemon_PreflowRunner, 6},
    {"_rlemon_EdmondsKarpRunner", (DL_FUNC) &_rlemon_EdmondsKarpRunner, 6},
    {"_rlemon_MaximumWeightPerfectMatchingRunner", (DL_FUNC) &_rlemon_MaximumWeightPerfectMatchingRunner, 4},
    {"_rlemon_MaximumWeightFractionalPerfectMatchingRunner", (DL_FUNC) &_rlemon_MaximumWeightFractionalPerfectMatchingRunner, 4},
    {"_rlemon_MaximumWeightFractionalMatchingRunner", (DL_FUNC) &_rlemon_MaximumWeightFractionalMatchingRunner, 4},
    {"_rlemon_MaximumWeightMatchingRunner", (DL_FUNC) &_rlemon_MaximumWeightMatchingRunner, 4},
    {"_rlemon_MaximumCardinalityMatchingRunner", (DL_FUNC) &_rlemon_MaximumCardinalityMatchingRunner, 3},
    {"_rlemon_MaximumCardinalityFractionalMatchingRunner", (DL_FUNC) &_rlemon_MaximumCardinalityFractionalMatchingRunner, 3},
    {"_rlemon_CycleCancellingRunner", (DL_FUNC) &_rlemon_CycleCancellingRunner, 6},
    {"_rlemon_CapacityScalingRunner", (DL_FUNC) &_rlemon_CapacityScalingRunner, 6},
    {"_rlemon_CostScalingRunner", (DL_FUNC) &_rlemon_CostScalingRunner, 6},
    {"_rlemon_NetworkSimplexRunner", (DL_FUNC) &_rlemon_NetworkSimplexRunner, 6},
    {"_rlemon_NagamochiIbarakiRunner", (DL_FUNC) &_rlemon_NagamochiIbarakiRunner, 4},
    {"_rlemon_HaoOrlinRunner", (DL_FUNC) &_rlemon_HaoOrlinRunner, 4},
    {"_rlemon_GomoryHuTreeRunner", (DL_FUNC) &_rlemon_GomoryHuTreeRunner, 4},
    {"_rlemon_HowardMmcRunner", (DL_FUNC) &_rlemon_HowardMmcRunner, 4},
    {"_rlemon_KarpMmcRunner", (DL_FUNC) &_rlemon_KarpMmcRunner, 4},
    {"_rlemon_HartmannOrlinMmcRunner", (DL_FUNC) &_rlemon_HartmannOrlinMmcRunner, 4},
    {"_rlemon_KruskalRunner", (DL_FUNC) &_rlemon_KruskalRunner, 4},
    {"_rlemon_MinCostArborescenceRunner", (DL_FUNC) &_rlemon_MinCostArborescenceRunner, 5},
    {"_rlemon_PlanarCheckingRunner", (DL_FUNC) &_rlemon_PlanarCheckingRunner, 3},
    {"_rlemon_PlanarEmbeddingRunner", (DL_FUNC) &_rlemon_PlanarEmbeddingRunner, 3},
    {"_rlemon_PlanarColoringRunner", (DL_FUNC) &_rlemon_PlanarColoringRunner, 4},
    {"_rlemon_PlanarDrawingRunner", (DL_FUNC) &_rlemon_PlanarDrawingRunner, 3},
    {"_rlemon_SuurballeRunner", (DL_FUNC) &_rlemon_SuurballeRunner, 6},
    {"_rlemon_DijkstraRunner", (DL_FUNC) &_rlemon_DijkstraRunner, 5},
    {"_rlemon_BellmanFordRunner", (DL_FUNC) &_rlemon_BellmanFordRunner, 5},
    {"_rlemon_ChristofidesRunner", (DL_FUNC) &_rlemon_ChristofidesRunner, 5},
    {"_rlemon_GreedyTSPRunner", (DL_FUNC) &_rlemon_GreedyTSPRunner, 5},
    {"_rlemon_InsertionTSPRunner", (DL_FUNC) &_rlemon_InsertionTSPRunner, 5},
    {"_rlemon_NearestNeighborTSPRunner", (DL_FUNC) &_rlemon_NearestNeighborTSPRunner, 5},
    {"_rlemon_Opt2TSPRunner", (DL_FUNC) &_rlemon_Opt2TSPRunner, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_rlemon(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
